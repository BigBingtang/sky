//框架开发模式-需要测试
apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk

        consumerProguardFiles getDefaultProguardFile('proguard-android.txt'),
                'proguard/proguard-default.pro',
                'proguard/proguard-sky.pro',
                'proguard/proguard-butterknife.pro',
                'proguard/proguard-commons-io.pro',
                'proguard/proguard-glide.pro',
                'proguard/proguard-gson.pro',
                'proguard/proguard-guava.pro',
                'proguard/proguard-nineoldandroids.pro',
                'proguard/proguard-okhttp3.pro',
                'proguard/proguard-support-v7.pro',
                'proguard/proguard-okio.pro',
                'proguard/proguard-retrofit2.pro'

    }
    lintOptions {
        textReport true
        textOutput 'stdout'
        abortOnError false
    }


}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':sky-annotations')
    compile project(':sky-cglib')
    compile deps.support.compat_v7
    compile deps.support.cardview_v7
    compile deps.support.recyclerview_v7


    compile deps.library.guava
    compile deps.library.butterknife
    compile deps.library.nineoldandroids
    compile deps.library.systembartint
    compile deps.library.commons_lang3
    compile deps.library.gson
    compile deps.library.retrofit
    compile deps.library.glide_okhttp3
    compile deps.library.okhttp3
    compile deps.library.java5
    compile deps.library.glide
    compile deps.library.dagger
    compile deps.library.guava

    apt deps.apt.dagger_compiler

    testCompile files(getRuntimeJar())

    compile group: 'commons-io', name: 'commons-io', version: "${versions.commons_io}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
}

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

//apply from: rootProject.file('gradle/maven-github-aar.gradle')//Github打包
apply from: rootProject.file('gradle/gradle-mvn-push.gradle')//中央库打包